{"version":3,"sources":["QuizApp/conponents/Question.jsx","QuizApp/conponents/ScoreSection.jsx","QuizApp/App.js","index.js"],"names":["Question","current","entities","questions","setCurrent","setScore","setBoard","score","className","style","display","justifyContent","alignContent","length","questionText","replace","match","answerOption","map","e","i","isCorrect","console","log","key","onClick","index","p","answerText","ScoreSection","textAlign","width","App","arr","newArr","Arr","forEach","rand","Math","floor","random","splice","shuffle","question","filter","useState","board","useEffect","ReactDOM","render","document","getElementById"],"mappings":"4hUA8DeA,EA7DE,EACfC,UACAC,WACAC,YACAC,aACAC,WACAC,WACAC,WASE,oCACE,yBAAKC,UAAU,oBACb,yBACEA,UAAU,iBACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,gBAChBC,aAAc,WAEhB,2BACE,0CAAgBX,EAAU,IAE5B,2BACE,sCAEE,8BAAOM,IAHX,IAKIJ,EAAUU,SAGhB,yBAAKL,UAAU,iBACZL,EAAUF,GAASa,aAAaC,QAC/B,WACCC,GAAUd,EAASc,MAI1B,yBAAKR,UAAU,kBACZL,EAAUF,GAASgB,aAAaC,IAAI,CAACC,EAAGC,KACnCD,EAAEE,WAAWC,QAAQC,IAAIJ,GAE3B,4BACEK,IAAKJ,EACLK,QAAS,KAxCrB,IAAqBC,IAyCKN,EAxCpBnB,EAAUE,EAAUU,OAAS,EAAGT,EAAWH,EAAU,GACpDK,GAAS,GACVH,EAAUF,GAASgB,aAAaS,GAAOL,WACzChB,EAAUsB,GAAMA,EAAI,KAuCXR,EAAES,WAAWb,QAAQ,WAAaC,GAAUd,EAASc,SC1CrDa,EAVM,EAAGtB,QAAOJ,eAE3B,yBAAKK,UAAU,iBACb,uBAAGC,MAAO,CAAEqB,UAAW,SAAUC,MAAO,SAAxC,cACcxB,EADd,WAC6BJ,EAAUU,S,eCA9B,SAASmB,IACtB,IAAI7B,EACJ,SAAiB8B,GACf,IAAMC,EAAS,IAAID,GACbE,EAAM,IAAID,GAMhB,OALAA,EAAOE,QAAQ,CAACjB,EAAGC,KACjB,IAAMiB,EAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAItB,QAC5CqB,EAAOd,GAAKe,EAAIE,GAChBF,EAAIM,OAAOJ,EAAM,KAEZH,EATOQ,CAAQC,GAAUC,OAAO,CAACzB,EAAGC,IAAMA,EAAI,IAD3B,MAYEyB,mBAAS,GAZX,mBAYrB5C,EAZqB,KAYZG,EAZY,OAaFyC,oBAAS,GAbP,mBAarBC,EAbqB,KAadxC,EAbc,OAcFuC,mBAAS,GAdP,mBAcrBtC,EAdqB,KAcdF,EAdc,KAe5B0C,oBAAU,QAQV,OACE,yBAAKvC,UAAU,OACZsC,EACC,kBAAC,EAAD,CAAcvC,MAAOA,EAAOJ,UAAWA,IAEvC,kBAAC,EAAD,CACED,SAXS,CACf,SAAU,IACV,SAAU,KAUJI,SAAUA,EACVH,UAAWA,EACXF,QAASA,EACTG,WAAYA,EACZC,SAAUA,EACVE,MAAOA,KChCjByC,IAASC,OAAO,kBAACjB,EAAD,MAASkB,SAASC,eAAe,W","file":"static/js/main.64f26d06.chunk.js","sourcesContent":["import React from \"react\";\nconst Question = ({\n  current,\n  entities,\n  questions,\n  setCurrent,\n  setScore,\n  setBoard,\n  score,\n}) => {\n  function handleClick(index) {\n    if (current < questions.length - 1) setCurrent(current + 1);\n    else setBoard(true);\n    if (questions[current].answerOption[index].isCorrect)\n      setScore((p) => p + 1);\n  }\n  return (\n    <>\n      <div className=\"question-section\">\n        <div\n          className=\"question-count\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignContent: \"center\",\n          }}>\n          <p>\n            <span>Question {current + 1}</span>\n          </p>\n          <p>\n            <span>\n              score\n              <span>{score}</span>\n            </span>\n            /{questions.length}\n          </p>\n        </div>\n        <div className=\"question-text\">\n          {questions[current].questionText.replace(\n            /&#?\\w+;/g,\n            (match) => entities[match]\n          )}\n        </div>\n      </div>\n      <div className=\"answer-section\">\n        {questions[current].answerOption.map((e, i) => {\n          if (e.isCorrect) console.log(e);\n          return (\n            <button\n              key={i}\n              onClick={() => {\n                handleClick(i);\n              }}>\n              {e.answerText.replace(/&#?\\w+;/g, (match) => entities[match])}\n            </button>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\nconst ScoreSection = ({ score, questions }) => {\n  return (\n    <div className=\"score-section\">\n      <p style={{ textAlign: \"center\", width: \"100%\" }}>\n        You scored {score} out of {questions.length}\n      </p>\n    </div>\n  );\n};\n\nexport default ScoreSection;\n","import React, { useEffect, useState } from \"react\";\nimport Question from \"./conponents/Question\";\nimport ScoreSection from \"./conponents/ScoreSection\";\nimport \"./index.css\";\nimport question from \"./Quiz.json\";\nexport default function App() {\n  let questions = shuffle(question).filter((e, i) => i < 10);\n  function shuffle(arr) {\n    const newArr = [...arr];\n    const Arr = [...newArr];\n    newArr.forEach((e, i) => {\n      const rand = Math.floor(Math.random() * Arr.length);\n      newArr[i] = Arr[rand];\n      Arr.splice(rand, 1);\n    });\n    return newArr;\n  }\n  const [current, setCurrent] = useState(0);\n  const [board, setBoard] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    if (score);\n  });\n  const entities = {\n    \"&#039;\": \"'\",\n    \"&quot;\": '\"',\n    // add more if needed\n  };\n  return (\n    <div className=\"app\">\n      {board ? (\n        <ScoreSection score={score} questions={questions} />\n      ) : (\n        <Question\n          entities={entities}\n          setBoard={setBoard}\n          questions={questions}\n          current={current}\n          setCurrent={setCurrent}\n          setScore={setScore}\n          score={score}\n        />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./WeatherApp/App.jsx\";\n// import App from \"./React_Router/App\";\n// import App from \"./temp/App\";\n// import App from \"./MusicApp/Play\";\n// import App from \"./MusicApp/App\";\nimport App from \"./QuizApp/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}